<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.image.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.shape.*?>
<?import javafx.scene.text.*?>

<AnchorPane prefHeight="441.0" prefWidth="247.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="lbycpa2.module1_q4.ADataStructure">
   <children>
      <Rectangle arcHeight="5.0" arcWidth="5.0" height="65.0" layoutX="-6.0" layoutY="-3.0" stroke="TRANSPARENT" strokeType="INSIDE" width="262.0">
         <fill>
            <LinearGradient endX="1.0" endY="1.0">
               <stops>
                  <Stop>
                     <color>
                        <Color red="0.23333333432674408" green="0.9744444489479065" blue="1.0" />
                     </color>
                  </Stop>
                  <Stop offset="1.0">
                     <color>
                        <Color red="1.0" green="1.0" blue="1.0" />
                     </color>
                  </Stop>
               </stops>
            </LinearGradient>
         </fill>
      </Rectangle>
      <ScrollPane layoutX="3.0" layoutY="62.0" prefHeight="598.0" prefWidth="250.0">
         <content>
            <VBox prefWidth="245.0">
               <children>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Stack">
                     <font>
                        <Font name="System Bold" size="22.0" />
                     </font>
                  </Label>
                  <AnchorPane prefHeight="200.0" prefWidth="200.0">
                     <children>
                        <ImageView fitHeight="186.0" fitWidth="256.0" layoutX="-4.0" layoutY="-1.0">
                           <image>
                              <Image url="@5-undo%20and%20redo.jpg" />
                           </image>
                        </ImageView>
                     </children>
                  </AnchorPane>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Access">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label prefWidth="242.0" text="Access in a stack data structure is limited to the topmost item, following the LIFO principle. In the context of undo and redo mechanisms, this means that users can only access and manipulate the most recent actions performed. When performing an undo, the top item (latest action) is accessed and reversed, effectively &quot;undoing&quot; the most recent user action. Similarly, during a redo, the top item from the redo stack (an undone action) is accessed and executed, allowing users to &quot;redo&quot; previously undone actions in the order they were originally performed.">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Search">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label text="In a stack data structure, searching involves iterating through the elements sequentially from the top (most recent) to the bottom (oldest) until a specific item or condition is found. However, searching is not a primary operation in undo and redo systems. Still, the undo and redo stacks can be searched for specific actions or command objects if the application requires a specific type of action to be identified or inspected, an advanced debugging or audit trail purposes rather than as a core part of the undo and redo functionality.">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Insert">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label prefWidth="157.0" text="In a stack data structure, inserting corresponds to pushing a new item only onto the top of the stack. In the context of undo and redo mechanisms, inserting is a fundamental operation when recording user actions. Each user action or command is inserted onto the undo stack as a new command object. ">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Delete">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Deleting in a stack data structure means removing the topmost item, which corresponds to the most recent action or command. For undo and redo mechanisms, though deleting is not a common operation, memory constraints can result in either automatic or manual implementation of a delete operation to clear the stacks, effectively removing all actions, saving storage, and starting anew.">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="24.0" prefWidth="242.0" text="Undo and Redo Mechanism">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label text="In undo and redo mechanisms, the stack data structure is used to track user actions in chronological order, following the LI-FO (Last In - First Out) princile. When a user performs an action, it is recorded as a command object and pushed onto the undo stack. When the user initiates an undo operation, the most recent action is popped from the undo stack and reversed. The redo stack stores undone actions, allowing users to redo actions if needed. This stack-based approach ensures that actions are executed in the correct order, chronologically." wrapText="true" />
               </children>
            </VBox>
         </content>
      </ScrollPane>
      <Button layoutX="14.0" layoutY="17.0" mnemonicParsing="false" onAction="#switchToMainScene" text="Back" />
   </children>
</AnchorPane>
