<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.paint.Color?>
<?import javafx.scene.paint.LinearGradient?>
<?import javafx.scene.paint.Stop?>
<?import javafx.scene.shape.Rectangle?>
<?import javafx.scene.text.Font?>

<VBox prefHeight="450.0" prefWidth="250.0" xmlns="http://javafx.com/javafx/18" xmlns:fx="http://javafx.com/fxml/1" fx:controller="lbycpa2.module1_q4.DataStructureController">
   <children>
      <AnchorPane>
         <children>
            <Rectangle arcHeight="5.0" arcWidth="5.0" height="65.0" stroke="TRANSPARENT" strokeType="INSIDE" width="262.0">
               <fill>
                  <LinearGradient endX="1.0" endY="1.0">
                     <stops>
                        <Stop>
                           <color>
                              <Color red="0.23333333432674408" green="0.9744444489479065" blue="1.0" />
                           </color>
                        </Stop>
                        <Stop offset="1.0">
                           <color>
                              <Color red="1.0" green="1.0" blue="1.0" />
                           </color>
                        </Stop>
                     </stops>
                  </LinearGradient>
               </fill>
            </Rectangle>
            <Button layoutX="16.0" layoutY="16.0" mnemonicParsing="false" onAction="#switchToMainScene" text="Back" />
         </children>
      </AnchorPane>
      <ScrollPane fitToWidth="true" layoutX="3.0" layoutY="62.0" prefHeight="1006.0" prefWidth="250.0">
         <content>
            <VBox>
               <children>
                  <Label prefHeight="32.0" text="Binary Search Tree">
                     <font>
                        <Font name="System Bold" size="22.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Phone Book">
                     <font>
                        <Font name="System Bold" size="11.0" />
                     </font>
                  </Label>
                  <Label text="A phonebook is similar to the Binary Search Tree since it allows users to do search, insert, and delete operations efficiently" wrapText="true">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <ImageView fitHeight="192.0" fitWidth="253.0" pickOnBounds="true" preserveRatio="true">
                     <image>
                        <Image url="@7-phone_book.png" />
                     </image>
                  </ImageView>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Access">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label text="To access elements within the phonebook, one simply needed to know a portion of the name. Since a phone book is likely to be arranged alphabetically, you can start in the middle and continue searching left or right of the pages until you found the target name. Similarly, in a binary search tree, it finds the specific node through comparing the left and right values and proceeds accordingly. Its goal is to reach that specific node and access its information as efficiently as possible." wrapText="true">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Search">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label text="Similar to the access operation, it also involves finding and retrieving a specific element but its mainly concerned with determining whether that element exists within the phonebook/tree. " wrapText="true">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Insert">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label text="When inserting a new element within the tree or phonebook. One has to compare the name values of the new contact to existing entries. This comparison determines the position of the new contact within existing entries whether it would be to the left or to the right of the node." wrapText="true">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
                  <Label prefHeight="32.0" prefWidth="157.0" text="Delete">
                     <font>
                        <Font name="System Bold" size="14.0" />
                     </font>
                  </Label>
                  <Label text="The delete operation is a bit complex since there are three possible scenarios to consider. First, a search operation is performed to look for the element or contact that would be deleted. The first scenario to consider is the &quot;No Children&quot; (Leaf Node) wherein if the contact that must be deleted has no children or submembers, one can simply remove that node from the tree (Similar to crossing out the name of the contact). The next scenario to consider is One Child wherein if the node you want to delete has a left or a right child, it is possible to bypass the node (delete) through connecting its parent directly to its only child. This is similar to ripping a page out from the phone book and taping it to a different location. The last scenario to consider is &quot;Two Children&quot; wherein the node has both a left and right children. This last scenario is more complex since its either you have to find the smallest node in the right subtree and replace it with the in-order successor's data and delete its node (finding a replacement contact with the closest name alphabetically, copy its info to the contact to be deleted, and remove the replacement contact) or find the first in-order predecessor (largest node in left subtree) and use a similar process to replace and delete that node." wrapText="true">
                     <font>
                        <Font size="11.0" />
                     </font>
                  </Label>
               </children>
            </VBox>
         </content>
      </ScrollPane>
   </children>
</VBox>
